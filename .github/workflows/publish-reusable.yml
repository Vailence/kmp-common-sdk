name: 2. Github Release Reusable

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
 
jobs:
  checks:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 2
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Common SDK
        uses: android-actions/setup-android@v2

      - name: Run ktlintCheck on changed files
        if: steps.get_changed_files.outputs.CHANGED_FILES != ''
        run: ./gradlew ktlintCheck -PinternalKtlintGitFilter="${{ steps.get_changed_files.outputs.CHANGED_FILES }}"

      - name: lint check
        run: ./gradlew --no-daemon lintDebug

      - name: unit tests
        run: ./gradlew --no-daemon --stacktrace --rerun-tasks test

      - name: build project
        run: ./gradlew --no-daemon assemble

  set-tag:
    needs: [checks]
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract_version.outputs.sdk_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Extract SDK version
        id: extract_version
        run: |
          SDK_VERSION=$(grep '^SDK_VERSION_NAME=' gradle.properties | cut -d '=' -f2)
          echo "Extracted SDK version: ${SDK_VERSION}"
          echo "sdk_version=${SDK_VERSION}" >> $GITHUB_OUTPUT
          echo "SDK_VERSION=${SDK_VERSION}" >> $GITHUB_ENV
      - name: Create tag
        run: |
          git tag "${{ env.SDK_VERSION }}"
          git push origin "${{ env.SDK_VERSION }}"
          
  release-github:
    needs: [set-tag]
    runs-on: macos-latest
    outputs:
      tag: ${{ needs.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Build XCFramework
        run: ./make-ios-framework.sh
      - name: Github Release generation
        run: ./.github/git-release-ci.sh
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Verify framework existence
        run: ls -R mindbox-common/build/XCFrameworks/release
      - name: Upload XCFramework to release
        run: |
          gh release upload ${{ needs.set-tag.outputs.tag }} \
          mindbox-common/build/XCFrameworks/release/MindboxCommon.xcframework.zip \
          --clobber
        env:
          GH_TOKEN: ${{ github.token }}
          
  merge-master-into-develop:
    needs: [release-github]
    if: ${{ success() && startsWith(inputs.branch, 'release/') }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v5
        with:
          ref: develop

      - name: Create Pull Request master â†’ develop
        run: |
          gh pr create \
            --base develop \
            --head master \
            --title "Merge 'master' into 'develop' after release" \
            --body "Automated Pull Request to merge 'master' into 'develop' after successful release."
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Merge created PR automatically
        run: |
          pr_number=$(gh pr list --base develop --head master --json number --jq '.[0].number')
          if [ -n "$pr_number" ]; then
            gh pr merge "$pr_number" --merge --auto
          else
            echo "No matching PR found. Skipping merge."
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  trigger-repo-b:
    needs: [release-github]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow in repo B
        run: |
          echo "Triggering workflow in repo B..."
          echo "TAG=${{ needs.release-github.outputs.tag }}"
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            https://api.github.com/repos/vailence/kmp-common-sdk-spm/dispatches \
            -d "{\"event_type\": \"download_xcframework\", \"client_payload\": {\"version\": \"${{ needs.release-github.outputs.tag }}\"}}"
#  
#  message-to-loop-if-success:
#    needs: [release-github]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Send message to LOOP
#        env:
#            LOOP_NOTIFICATION_WEBHOOK_URL: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK_URL }}
#            VERSION: ${{ github.ref_name }}
#        run: |
#            MESSAGE=$(cat <<EOF
#            {
#              "text": "**ðŸ¤– KMP release was successful. Version: ${VERSION}**"
#            }
#            EOF)
#            curl -X POST "$LOOP_NOTIFICATION_WEBHOOK_URL" \
#              -H "Content-Type: application/json" \
#              -d "$MESSAGE"
#
